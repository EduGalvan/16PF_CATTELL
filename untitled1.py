# -*- coding: utf-8 -*-
"""Linear estimator

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G7e7pmD_t7DNnQHhBYiVpIB4ME02AF5e
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
from __future__ import absolute_import, division, print_function, unicode_literals
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
from keras import callbacks

import tensorflow.compat.v2.feature_column as fc

import tensorflow as tf
!pip install -q sklearn

dftrain = pd.read_csv('/content/Datos Definitivos Dimensiones.csv') # training data
dfeval = pd.read_csv('/content/Datos Definitivos Dimensiones.csv')

dftrain.drop(['elapsed'], axis=1, inplace = True)
dfeval.drop(['elapsed'], axis=1, inplace = True)

y_train = dftrain.pop('gender')
y_eval = dfeval.pop('gender')

dftrain.drop(['age',	'Unnamed: 0',	'accuracy',	'source'], axis=1, inplace=True)

dftrain.describe()

dftrain.J_mean.hist(bins=20)

pd.concat([dftrain], axis=1).groupby(y_train).L_mean.mean().plot(kind='barh')

dftrain.drop(['B_mean'], axis=1, inplace=True)

dftrain.head()

NUMERIC_COLUMNS = ['A_mean', 'C_mean', "D_mean", 'E_mean', 'F_mean', 'G_mean', 'H_mean', 'I_mean', 'J_mean', 'K_mean', 'L_mean', 'M_mean','N_mean', 'O_mean', 'P_mean']

feature_columns = []

for feature_name in NUMERIC_COLUMNS:
  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))

def make_input_fn(data_df, label_df, num_epochs=12, shuffle=True, batch_size=32):
  def input_function():
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))
    if shuffle:
      ds = ds.shuffle(1000)
    ds = ds.batch(batch_size).repeat(num_epochs)
    return ds
  return input_function

train_input_fn = make_input_fn(dftrain, y_train)
eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)

linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)
linear_est.train(train_input_fn)
result = linear_est.evaluate(eval_input_fn)



clear_output()
print(result)

result = list(linear_est.predict(eval_input_fn))
print(result[89]['probabilities'][0])
print(dfeval.loc[89])
print(y_eval.loc[89])

model_df = pd.DataFrame.from_records(result)

model_df
