# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1szTjoyDkTzVRLT1CZ8YI2Y50jK1mupT_
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
from __future__ import absolute_import, division, print_function, unicode_literals
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
from keras import callbacks
import tensorflow.compat.v2.feature_column as fc
import tensorflow as tf
!pip install -q sklearn

dftrain = pd.read_csv('/content/16pfb.csv') # training data
dftrain.drop(['country'], axis=1, inplace = True)

dftrain["gender"] = dftrain["gender"].apply(lambda x: 0 if x==1 else 1) #1 if "Male", 2 if "Female, 3 if "Other" (0 if missed).
dfeval["gender"] = dfeval["gender"].apply(lambda x: 0 if x==1 else 1)


for x in dftrain.index:
  if dftrain.loc[x, "age"] > 75:
    dftrain.loc[x, "age"] = 75
for x in dfeval.index:
  if dfeval.loc[x, "age"] > 75:
    dfeval.loc[x, "age"] = 75

dftrain['D10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['D9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['D8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['D7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['E10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['E9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['E8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['E7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['I10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['I9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['I8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['I7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['H10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['H9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['H8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['H7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['C10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['C9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['C8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['C7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['C6'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['F10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['F9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['F8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['F7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['F6'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['G10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['G9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['G8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['G7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['G6'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['K10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['K9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['K8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['K7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['K6'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['M10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['M9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['M8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['M7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['M6'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['O10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['O9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['O8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['O7'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['O6'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['A10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['A9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['A8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['J10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['J9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['J8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['L10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['L9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['L8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['N10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['N9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['N8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain['P10'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['P9'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)
dftrain['P8'].replace({5: 1, 4 : 2, 2 : 4, 1: 5}, inplace=True)

dftrain["A_mean"] = (dftrain["A1"] + dftrain["A2"] + dftrain["A3"] + dftrain["A4"] + dftrain["A5"] + dftrain["A6"] + dftrain["A7"] + dftrain["A8"] + dftrain["A9"] + dftrain["A10"])/10
dftrain["B_mean"] = (dftrain["B1"] + dftrain["B2"] + dftrain["B3"] + dftrain["B4"] + dftrain["B5"] + dftrain["B6"] + dftrain["B7"] + dftrain["B8"] + dftrain["B9"] + dftrain["B10"] + dftrain["B11"] + dftrain["B12"] + dftrain["B13"])/13
dftrain["C_mean"] = (dftrain["C1"] + dftrain["C2"] + dftrain["C3"] + dftrain["C4"] + dftrain["C5"] + dftrain["C6"] + dftrain["C7"] + dftrain["C8"] + dftrain["C9"] + dftrain["C10"])/10
dftrain["D_mean"] = (dftrain["D1"] + dftrain["D2"] + dftrain["D3"] + dftrain["D4"] + dftrain["D5"] + dftrain["D6"] + dftrain["D7"] + dftrain["D8"] + dftrain["D9"] + dftrain["D10"])/10
dftrain["E_mean"] = (dftrain["E1"] + dftrain["E2"] + dftrain["E3"] + dftrain["E4"] + dftrain["E5"] + dftrain["E6"] + dftrain["E7"] + dftrain["E8"] + dftrain["E9"] + dftrain["E10"])/10
dftrain["F_mean"] = (dftrain["F1"] + dftrain["F2"] + dftrain["F3"] + dftrain["F4"] + dftrain["F5"] + dftrain["F6"] + dftrain["F7"] + dftrain["F8"] + dftrain["F9"] + dftrain["F10"])/10
dftrain["G_mean"] = (dftrain["G1"] + dftrain["G2"] + dftrain["G3"] + dftrain["G4"] + dftrain["G5"] + dftrain["G6"] + dftrain["G7"] + dftrain["G8"] + dftrain["G9"] + dftrain["G10"])/10
dftrain["H_mean"] = (dftrain["H1"] + dftrain["H2"] + dftrain["H3"] + dftrain["H4"] + dftrain["H5"] + dftrain["H6"] + dftrain["H7"] + dftrain["H8"] + dftrain["H9"] + dftrain["H10"])/10
dftrain["I_mean"] = (dftrain["I1"] + dftrain["I2"] + dftrain["I3"] + dftrain["I4"] + dftrain["I5"] + dftrain["I6"] + dftrain["I7"] + dftrain["I8"] + dftrain["I9"] + dftrain["I10"])/10
dftrain["J_mean"] = (dftrain["J1"] + dftrain["J2"] + dftrain["J3"] + dftrain["J4"] + dftrain["J5"] + dftrain["J6"] + dftrain["J7"] + dftrain["J8"] + dftrain["J9"] + dftrain["J10"])/10
dftrain["K_mean"] = (dftrain["K1"] + dftrain["K2"] + dftrain["K3"] + dftrain["K4"] + dftrain["K5"] + dftrain["K6"] + dftrain["K7"] + dftrain["K8"] + dftrain["K9"] + dftrain["K10"])/10
dftrain["L_mean"] = (dftrain["L1"] + dftrain["L2"] + dftrain["L3"] + dftrain["L4"] + dftrain["L5"] + dftrain["L6"] + dftrain["L7"] + dftrain["L8"] + dftrain["L9"] + dftrain["L10"])/10
dftrain["M_mean"] = (dftrain["M1"] + dftrain["M2"] + dftrain["M3"] + dftrain["M4"] + dftrain["M5"] + dftrain["M6"] + dftrain["M7"] + dftrain["M8"] + dftrain["M9"] + dftrain["M10"])/10
dftrain["N_mean"] = (dftrain["N1"] + dftrain["N2"] + dftrain["N3"] + dftrain["N4"] + dftrain["N5"] + dftrain["N6"] + dftrain["N7"] + dftrain["N8"] + dftrain["N9"] + dftrain["N10"])/10
dftrain["O_mean"] = (dftrain["O1"] + dftrain["O2"] + dftrain["O3"] + dftrain["O4"] + dftrain["O5"] + dftrain["O6"] + dftrain["O7"] + dftrain["O8"] + dftrain["O9"] + dftrain["O10"])/10
dftrain["P_mean"] = (dftrain["P1"] + dftrain["P2"] + dftrain["P3"] + dftrain["P4"] + dftrain["P5"] + dftrain["P6"] + dftrain["P7"] + dftrain["P8"] + dftrain["P9"] + dftrain["P10"])/10

dftrain = dftrain[
    (dftrain['A_mean'] <= dftrain['A_mean'].quantile(0.975)) &
    (dftrain['A_mean'] >= dftrain['A_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['B_mean'] <= dftrain['B_mean'].quantile(0.975)) &
    (dftrain['B_mean'] >= dftrain['B_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['C_mean'] <= dftrain['C_mean'].quantile(0.975)) &
    (dftrain['C_mean'] >= dftrain['C_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['D_mean'] <= dftrain['D_mean'].quantile(0.975)) &
    (dftrain['D_mean'] >= dftrain['D_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['E_mean'] <= dftrain['E_mean'].quantile(0.975)) &
    (dftrain['E_mean'] >= dftrain['E_mean'].quantile(0.025))]
  
dftrain = dftrain[
    (dftrain['F_mean'] <= dftrain['F_mean'].quantile(0.975)) &
    (dftrain['F_mean'] >= dftrain['F_mean'].quantile(0.025))]
  
dftrain = dftrain[
    (dftrain['G_mean'] <= dftrain['G_mean'].quantile(0.975)) &
    (dftrain['G_mean'] >= dftrain['G_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['H_mean'] <= dftrain['H_mean'].quantile(0.975)) &
    (dftrain['H_mean'] >= dftrain['H_mean'].quantile(0.025))]
dftrain = dftrain[
    (dftrain['I_mean'] <= dftrain['I_mean'].quantile(0.975)) &
    (dftrain['I_mean'] >= dftrain['I_mean'].quantile(0.025))]
dftrain = dftrain[
    (dftrain['J_mean'] <= dftrain['J_mean'].quantile(0.975)) &
    (dftrain['J_mean'] >= dftrain['J_mean'].quantile(0.025))]
dftrain = dftrain[
    (dftrain['K_mean'] <= dftrain['K_mean'].quantile(0.975)) &
    (dftrain['K_mean'] >= dftrain['K_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['L_mean'] <= dftrain['L_mean'].quantile(0.975)) &
    (dftrain['L_mean'] >= dftrain['L_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['M_mean'] <= dftrain['M_mean'].quantile(0.975)) &
    (dftrain['M_mean'] >= dftrain['M_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['N_mean'] <= dftrain['N_mean'].quantile(0.975)) &
    (dftrain['N_mean'] >= dftrain['N_mean'].quantile(0.025))]

dftrain = dftrain[
    (dftrain['O_mean'] <= dftrain['O_mean'].quantile(0.975)) &
    (dftrain['O_mean'] >= dftrain['O_mean'].quantile(0.025))]
dftrain = dftrain[
    (dftrain['P_mean'] <= dftrain['P_mean'].quantile(0.975)) &
    (dftrain['P_mean'] >= dftrain['P_mean'].quantile(0.025))]



#OBSERVACION DE LOS DATOS
pd.concat([dftrain], axis=1).groupby('gender').H10_mean.mean().plot(kind='barh')

pd.concat([dftrain], axis=1).groupby('gender').F1.mean().plot(kind='barh')

pd.concat([dftrain], axis=1).groupby('gender').H_mean.mean().plot(kind='barh')
plt.title('Diferencias en sensibilidad por género')

pd.concat([dftrain], axis=1).groupby('gender').D_mean.mean().plot(kind='barh')
plt.title('Diferencias Dominancia por género')

dftrain.E_mean.hist(bins=20)
plt.title('Liveliness')
plt.xlabel('Puntuación directa')
plt.ylabel('Frecuencia')

dftrain['B_mean'].min()

dftrain.H_mean.hist(bins=20)
plt.title('Sensitivity')
plt.xlabel('Puntuación directa')
plt.ylabel('Frecuencia')

#CORRELATION MAP


dfcorr = dftrain.drop(dftrain.iloc[:, 0:168], axis = 1) #NOS QUEDAMOS SOLO CON LAS PUNTUACIONES MEDIAS DE TODAS LAS DIMESNIONES Y DESECHAMOS EL RESTO DE ITEM

fig, ax = plt.subplots(figsize=(12, 12))
corr = dfcorr.corr(method = "pearson")
mask = np.triu(corr)
corr.index = ['Warmth (A)', 'Reasoning (B)', 'Emotional Stability (C)', 'Dominance (E)', 'Liveliness (F)', 'Rule-Consciousness (G)', 'Social Boldness (H)', 'Sensitivity (I)', 'Vigilance (L)', 'Abstractedness (M)', 'Privateness (N)', 'Apprehension (0)', 'Openness to Change (Q1)', 'Self-Reliance (Q2)', 'Perfectionism (Q3)', 'Tension (Q4)' ]
corr.columns = ['Warmth (A)', 'Reasoning (B)', 'Emotional Stability (C)', 'Dominance (E)', 'Liveliness (F)', 'Rule-Consciousness (G)', 'Social Boldness (H)', 'Sensitivity (I)', 'Vigilance (L)', 'Abstractedness (M)', 'Privateness (N)', 'Apprehension (0)', 'Openness to Change (Q1)', 'Self-Reliance (Q2)', 'Perfectionism (Q3)', 'Tension (Q4)' ]

sns.heatmap(corr, linewidths= 1, annot= True, square= True, fmt= ".1f", center= 0.08, mask = mask)


dftrain.head()

sns.scatterplot(x= dftrain["N_mean"], y= dftrain["D_mean"])
